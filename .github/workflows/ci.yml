name: NeuraFix CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10']
    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Linting for code quality
      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # Step 5: Run unit tests with code coverage
      - name: Run tests
        run: |
          pip install pytest pytest-cov
          pytest --cov=app --cov-report xml:coverage.xml

      # Step 6: Upload code coverage report to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Build the distribution package
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      # Step 5: Publish package to PyPI
      - name: Upload package to PyPI
        uses: pypa/gh-action-pypi-publish@v2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Run static code analysis
      - name: Run static analysis
        run: |
          pip install pylint
          pylint app/ --exit-zero